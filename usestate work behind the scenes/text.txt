Summary:
Behind the Scenes of useState()

1) State Initialization:

When you call useState with an initial state value, React sets up an internal state for the component.
useState returns an array with two elements: the current state and a function to update that state.

2) State Storage:

React maintains a list of states for each component instance. This list is tied to the component's lifecycle.
When the component renders, React ensures the correct state values are retrieved from this list.

3) State Update:

When you call the state updater function (e.g., setState), React schedules a re-render of the component.
The state updater function enqueues an update to the state value.
During the re-render, React processes this queue, updates the state, and triggers a new render with the updated state.

4) Render Cycle:

Every time the component renders, the useState calls are processed in the same order. This order is crucial because it allows React to match the current state to the corresponding state call.
React uses an internal index to keep track of useState calls. This index is reset on each render, ensuring that state updates and reads align correctly.

Previous state:
Using the previous state with useState is practical in scenarios where state updates depend on the current state value. It ensures state updates are accurate and consistent


/// READ This
react use a array to store the value of usestate, initially the first value we give them, then when the function call and our page re-render and value is updated by setcount or setvariable then this upadted value is store in the array in place of initial value and when function calls again it will run by this new value.. 

if we have 4 setcount command then when function calls the the last one will updated

so now if we want to set our variable four time then what to do ?
in this case we need to pass a callback function in setcount variable and this callback function wuill call by react, we need to pass a previourvalue variable 

update state batch : when we pass a callback function to setcount variable it will store value and when second setcount will run the, our react will remeber the previous state then , pass this value of previous state